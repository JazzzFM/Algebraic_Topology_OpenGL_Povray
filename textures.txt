pigment { 
  checker
  pigment {granite color_map { [0 rgb 1][1 rgb .9] }}
  pigment {granite color_map { [0 rgb .1][1 rgb .1] }}
  }

  #declare TileNormal =
    normal
    { gradient x 2 // Double the strength because of the averaging
      slope_map
      { [0 <0, 1>] // 0 height, strong slope up
        [.1 <1, 0>] // maximum height, horizontal
        [.95 <1, 0>] // maximum height, horizontal
        [1 <0, -1>] // 0 height, strong slope down
      }
    }
  normal
  { average normal_map
    { [1 TileNormal]
      [1 TileNormal rotate y*90]
    }
  }

}

text {
    ttf "timrom.ttf", "Terminus", 0.1, 0
    scale <0.7, 0.7, 0.7>
    translate < 0.0, 0.25,-3.5>
    rotate <0, 130, 0>
    texture{ T_Gold_1A
             finish { phong 1 reflection {0.5}}
    }

  }

text {
    ttf "timrom.ttf", "x", 0.1, 0
    rotate <0, 130, 0>
    scale <0.6, 0.6, 0.6>
    translate < 2.5, 0.0, 0.0>
    pigment { Red }
    finish {
              ambient .1
              diffuse .1
              specular 1
              roughness .001
              reflection {
              0.85
              }
            }
}

text {
    ttf "timrom.ttf", "z", 0.1, 0
    rotate <0, 130, 0>
    scale <0.6, 0.6, 0.6>
    translate < 0.0, 2.5, 0.0>
    pigment { Blue }
    finish {
              ambient .1
              diffuse .1
              specular 1
              roughness .001
              reflection {
              0.85
              }
            }
}

text {
    ttf "timrom.ttf", "y", 0.1, 0
    rotate <0, 130, 0>
    scale <0.6, 0.6, 0.6>
    translate < 0.0, 0.0, 2.5>
    pigment { Green }
    finish {
              ambient .1
              diffuse .1
              specular 1
              roughness .001
              reflection {
              0.85
              }
            }
}

polygon {
3
<-20, -2, -20>   <20, -2, -20>   <20, -2, 20>   

pigment { 
  checker
  pigment {granite color_map { [0 rgb 1][1 rgb .9] }}
  pigment {granite color_map { [0 rgb .1][1 rgb .1] }}
}

  #declare TileNormal =
    normal
    { gradient x 2 // Double the strength because of the averaging
      slope_map
      { [0 <0, 1>] // 0 height, strong slope up
        [.1 <1, 0>] // maximum height, horizontal
        [.95 <1, 0>] // maximum height, horizontal
        [1 <0, -1>] // 0 height, strong slope down
      }
    }
  normal
  { average normal_map
    { [1 TileNormal]
      [1 TileNormal rotate y*90]
    }
  }

}

light_source {
<-2, 4, 1>   
color rgb <0.5, 0.5, 0.5>
} 

sphere {
<0, 0, 0>   0.25
pigment { Red }
finish {
   ambient .1
   diffuse .1
   specular 1
   roughness .001
   reflection {
   0.85
   }
}
}





polygon {
3
<20, -2, 20>   <-20, -2, 20>   <-20, -2, -20>   pigment {
    marble
    turbulence 0.5
    lambda 1.5
    omega 0.8
    octaves 5
    frequency 3
    color_map {
      [0.00 color Red]
      [0.33 color Black]
      [0.66 color White]
      [1.00 color Red]
    }
    rotate 45*z
  }
scale 3.0
finish {
   ambient .1
   diffuse .1
   specular 1
   roughness .001
   reflection {
   0.4
   }
}
}
























camera {
    location <0, 1, -4>
    look_at <0, 2, 0>
    angle 80
  }
  
  sphere {
    2*y, 1
    pigment { color rgb <1, 1, 1> }
    finish { ambient 0.2 diffuse 0 reflection 0.6 }
  }

 sky_sphere {
    pigment {
      gradient y
      color_map {
        [0.000 0.002 color rgb <1.0, 0.2, 0.0>
                     color rgb <1.0, 0.2, 0.0>]
        [0.002 0.200 color rgb <0.8, 0.1, 0.0>
                     color rgb <0.2, 0.2, 0.3>]
      }
      scale 0.5
      translate -1
    }
    pigment {
      bozo
      turbulence 0.65
      octaves 6
      omega 0.7
      lambda 2
      color_map {
          [0.0 0.1 color rgb <0.85, 0.85, 0.85>
                   color rgb <0.75, 0.75, 0.75>]
          [0.1 0.5 color rgb <0.75, 0.75, 0.75>
                   color rgbt <1, 1, 1, 1>]
          [0.5 1.0 color rgbt <1, 1, 1, 1>
                   color rgbt <1, 1, 1, 1>]
      }
      scale <0.2, 0.5, 0.2>
    }
    rotate -135*x
  }

light_source {
<10, 10,-10>   
color rgb <0.5, 0.5, 0.5>
} 








sky_sphere {
    pigment {
      //gradient y
      image_map {
        "red terminus.png"
      }
      scale 2
      translate -1
      rotate <90, 0, 0>
    }
  }

light_source {
<10, 10,-10>   
color rgb <0.5, 0.5, 0.5>
} 



///*/*/*/* THis one sky
 sky_sphere {
    pigment {
      //gradient y
      image_map {
        "red terminus.png"
        map_type 0
      }
      scale 2
      translate -1
      rotate <90, 0, 0>
    }
    rotate -60*x
    rotate -20*y
  }

light_source {
<10, 10,-10>   
color rgb <0.5, 0.5, 0.5>
} 



camera {
    location <2, 2, -4>
    look_at <2, 1, 0>
    angle 80
  }

  sky_sphere {
    pigment {
      //gradient y
      image_map {
        "carina_fenyes_3000.png"
        map_type 0
      }
      scale 2
      translate -1
      rotate <90, 0, 0>
    }
    rotate -60*x
    rotate -20*y
  }

light_source {
<10, 10,-10>   
color rgb <0.5, 0.5, 0.5>
}














camera {
    location <2, 2, -4>
    look_at <2, 1, 0>
    angle 80
  }

  sky_sphere {
    pigment {
      //gradient y
      image_map {
        "carina_fenyes_3000.png"
        map_type 0
      }
      scale 0.1
      translate -1
      rotate <90, 0, 0>
    }
    rotate -60*x
    rotate -20*y
  }

light_source {
<10, 10,-10>   
color rgb <0.5, 0.5, 0.5>
} 




sky_sphere {
    pigment {
      //gradient y
      image_map {
        "carina_fenyes_3000.png"
        map_type 0
      }
      scale 0.115
      translate -1
      rotate <90, 0, 0>
    }
    rotate -60*x
    rotate -20*y
  }





  
  // Macro for the adjustment of images
// for image_map with assumed_gamma = 1.0 ;
#macro Correct_Pigment_Gamma(Orig_Pig, New_G)
  #local Correct_Pig_fn =
      function{ pigment {Orig_Pig} }
  pigment{ average pigment_map{
   [function{ pow(Correct_Pig_fn(x,y,z).x, New_G)}
               color_map{[0 rgb 0][1 rgb<3,0,0>]}]
   [function{ pow(Correct_Pig_fn(x,y,z).y, New_G)}
               color_map{[0 rgb 0][1 rgb<0,3,0>]}]
   [function{ pow(Correct_Pig_fn(x,y,z).z, New_G)}
               color_map{[0 rgb 0][1 rgb<0,0,3>]}]
   }}
#end //
// "image_map" gamma corrected:
//    Correct_Pigment_Gamma(
//    pigment{ image_map{ jpeg "colors.jpg"}}
//    , Correct_Gamma)
//------------------------------------------------

box{ <-1, -1, -1>,< 1, 1, 1>
 texture{ uv_mapping
   Correct_Pigment_Gamma( // gamma correction
     pigment{
     image_map{  "carina_fenyes_3000.png"
                map_type 0    // planar
                interpolate 2 // bilinear
                once //
              } //  end of image_map
    } // end of pigment
    , 2.2) //, New_Gamma
    finish { ambient 1 diffuse 0 }
 } // end of texture
scale 1
} // end of skybox --------------------
















/**//////////*/*/+*/*/

the goood oneeeeee




global_settings{ assumed_gamma 1.0 }
#default{ finish{ ambient 0.1 diffuse 0.9 }}
//--------------------------------------------------------------------------
#include "colors.inc"
#include "textures.inc"
#include "glass.inc"
#include "metals.inc"
#include "golds.inc"
#include "stones.inc"
#include "woods.inc"
#include "shapes.inc"
#include "shapes2.inc"
#include "functions.inc"
#include "math.inc"
#include "transforms.inc"
//--------------------------------------------------------------------------------------------------------<<<<
#declare Camera_Number = 1 ;
//---------------------------
//--------------------------------------------------------------------------------------------------------<<<<
#switch ( Camera_Number )
#case (0)
  #declare Camera_Position = <0.00, 1.00, -20.00> ;  // front view
  #declare Camera_Look_At  = < 0.00, 1.00,  0.00> ;
  #declare Camera_Angle    =  55 ;
#break
#case (1)
  #declare Camera_Position = <  0.00, 2.00, -5.00> ;  // front view up
  #declare Camera_Look_At  = < -1.00, 4.50,  0.00> ;
  #declare Camera_Angle    =  85 ;
#break
#else
  #declare Camera_Position = < 0.00, 1.00, -5.00> ;  // front view
  #declare Camera_Look_At  = < 0.00, 1.00,  0.00> ;
  #declare Camera_Angle    =  55 ;
#break
#end // of "#switch ( Camera_Number )" -----------------------------
//-------------------------------------------------------------------------------------------------------<<<<
camera{ location < 3.00, 0.50, 4.00>
        right    x*image_width/image_height
        angle    Camera_Angle
        look_at  < 0.00, 0.50,  1.00>
      }
//------------------------------------------------------------------------------------------------------<<<<<
// sun ---------------------------------------------------------------------
light_source{<1500,2500,-2500> color White*0.9}           // sun light
light_source{ Camera_Position  color rgb<0.9,0.9,1>*0.1}  // flash light

// sky ---------------------------------------------------------------------
// Adaption of images for image_map to assumed_gamma = 1.0 : 
#ifndef( Correct_Gamma) #declare Correct_Gamma = 1.5; #end  // display_gamma = 2.2
#macro Correct_Pigment_Gamma(Original_Pigment_, New_Gamma_)
  #local Correct_Pigment_fn = function{ pigment {Original_Pigment_ } }
  pigment{ average pigment_map{
      [function{ pow(Correct_Pigment_fn(x,y,z).x, New_Gamma_)} color_map{[0 rgb 0][1 rgb<3,0,0>] } ]
      [function{ pow(Correct_Pigment_fn(x,y,z).y, New_Gamma_)} color_map{[0 rgb 0][1 rgb<0,3,0>] } ]
      [function{ pow(Correct_Pigment_fn(x,y,z).z, New_Gamma_)} color_map{[0 rgb 0][1 rgb<0,0,3>] } ]
    } }
#end // 
// "image_map" Gamma corrected :
//    Correct_Pigment_Gamma(
//    pigment{ image_map{ jpeg "colors.jpg"}}
//    , Correct_Gamma)
//--------------------------------------------------------------------------------------
box{<-1, -1, -1>,< 1, 1, 1>
 texture{ uv_mapping
   Correct_Pigment_Gamma( // gamma correction
     pigment{
     image_map{ png "carina_fenyes_3000.png"
                map_type 0    // planar
                interpolate 2 // bilinear
                once //
              } //  end of image_map
   
    } // end of pigment
    , 2.5) //, New_Gamma
    finish { ambient 1  diffuse 0 }
 } // end of texture
scale 10000
rotate <0, -clock*90, 0>
} // end of skybox --------------------










